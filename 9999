<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Interactive Visualization: COE Premiums & Vehicle Population</title>
  <script src="https://d3js.org/d3.v6.min.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background: #f4f4f4;
    }
    .container {
      background: #fff;
      padding: 20px;
      margin-bottom: 20px;
      border-radius: 4px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    h2 { margin-top: 0; }
    .axis path, .axis line {
      fill: none;
      stroke: #000;
    }
    .grid line {
      stroke: #ccc;
      stroke-dasharray: 3 3;
    }
    .line {
      fill: none;
      stroke-width: 2px;
    }
    .tooltip {
      position: absolute;
      background: lightsteelblue;
      padding: 5px;
      border: 1px solid #000;
      pointer-events: none;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    .filter-container {
      margin-bottom: 10px;
    }
    /* 为各部分添加边框 */
    #description, .filter-container, #chart-container {
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    .legend {
      font-size: 12px;
    }
    select {
      margin-left: 5px;
      margin-right: 20px;
    }
  </style>
</head>
<body>
  <!-- 描述部分 -->
  <div id="description" class="container">
    <h2>Hypothesis and Data Description</h2>
    <p>
      I hypothesize that there is a positive correlation between COE premiums and the overall vehicle population in Singapore. As the vehicle population increases, the demand for vehicles intensifies, which may drive up COE premiums. Conversely, periods with a declining vehicle population might correspond with lower premiums.
    </p>
    <p>
      The analysis uses two datasets:
      <strong>COE Bidding Results / Prices</strong> (from Jan-10 to Mar-25, premium values)
      and <strong>Annual Motor Vehicle Population by Vehicle Type</strong> (from 2005 to 2025, vehicle numbers).
      The chart displays a dual-axis time series with the left y-axis representing COE Premiums and the right y-axis representing the aggregated total vehicles per year.
    </p>
  </div>
  
  <!-- 过滤选项 -->
  <div class="container filter-container">
    <div>
      <label><input type="checkbox" id="toggleCoe" checked> Show COE Premiums</label>
      <label style="margin-left: 20px;"><input type="checkbox" id="toggleVehicle" checked> Show Total Vehicle Count</label>
    </div>
    <div style="margin-top:10px;">
      <!-- COE 数据过滤 -->
      <label for="coeYearSelect">COE Year:</label>
      <select id="coeYearSelect">
        <option value="All">All</option>
      </select>
      <label for="coeClassSelect">Vehicle Class:</label>
      <select id="coeClassSelect">
        <option value="All">All</option>
      </select>
    </div>
    <div style="margin-top:10px;">
      <!-- 车辆数据过滤 -->
      <label for="vehicleCategorySelect">Vehicle Category:</label>
      <select id="vehicleCategorySelect">
        <option value="All">All</option>
      </select>
    </div>
  </div>
  
  <!-- 图表部分 -->
  <div id="chart-container" class="container">
    <svg id="chart" viewBox="0 0 900 500" preserveAspectRatio="xMidYMid meet"></svg>
    <div class="tooltip" id="tooltip"></div>
  </div>
  
  <script>
    // SVG 尺寸与边距
    const svgWidth = 900, svgHeight = 500;
    const margin = { top: 20, right: 60, bottom: 40, left: 60 };
    const chartWidth = svgWidth - margin.left - margin.right;
    const chartHeight = svgHeight - margin.top - margin.bottom;
    
    // 创建 SVG 元素及图表分组
    const svg = d3.select("#chart");
    const chartGroup = svg.append("g")
                          .attr("transform", `translate(${margin.left},${margin.top})`);
    
    // 定义日期解析函数
    const parseCoeDate = d3.timeParse("%Y-%m"); // 如 "Jan-10" -> 2010-01-01
    const parseVehicleYear = d3.timeParse("%Y");
    
    // 全局变量保存原始数据
    let coeDataOriginal = [];
    let vehicleDataOriginal = [];
    
    // 定义比例尺和坐标轴（初始域会在 updateChart 中更新）
    const xScale = d3.scaleTime().range([0, chartWidth]);
    const yLeft = d3.scaleLinear().range([chartHeight, 0]);
    const yRight = d3.scaleLinear().range([chartHeight, 0]);
    
    const xAxis = d3.axisBottom(xScale);
    const yAxisLeft = d3.axisLeft(yLeft).tickFormat(d => `$${d}`);
    const yAxisRight = d3.axisRight(yRight);
    
    // 初始添加坐标轴组和网格线组
    chartGroup.append("g")
              .attr("class", "x axis")
              .attr("transform", `translate(0, ${chartHeight})`);
    
    chartGroup.append("g")
              .attr("class", "y axis left")
              .attr("fill", "steelblue")
              .append("text")
              .attr("transform", "rotate(-90)")
              .attr("y", -50)
              .attr("dy", "0.71em")
              .attr("text-anchor", "end")
              .text("COE Premium");
    
    chartGroup.append("g")
              .attr("class", "y axis right")
              .attr("transform", `translate(${chartWidth}, 0)`)
              .attr("fill", "orange")
              .append("text")
              .attr("transform", "rotate(-90)")
              .attr("y", 40)
              .attr("dy", "0.71em")
              .attr("text-anchor", "end")
              .text("Total Vehicles");
    
    // 添加初始网格线（这里仅添加一次，后续随坐标轴更新）
    const xGridGroup = chartGroup.append("g").attr("class", "grid x-grid");
    const yGridGroup = chartGroup.append("g").attr("class", "grid y-grid");
    
    // 定义折线生成器（添加平滑曲线）
    const lineCOE = d3.line()
                      .curve(d3.curveMonotoneX)
                      .x(d => xScale(d.date))
                      .y(d => yLeft(d.premium));
    const lineVehicle = d3.line()
                          .curve(d3.curveMonotoneX)
                          .x(d => xScale(d.year))
                          .y(d => yRight(d.total));
    
    // tooltip
    const tooltip = d3.select("#tooltip");
    
    // 清理 CSV 数据中的多余空白
    const cleanRow = row => {
      const newRow = {};
      for (const key in row) {
        newRow[key.trim()] = typeof row[key] === "string" ? row[key].trim() : row[key];
      }
      return newRow;
    };
    
    // CSV 数据源 URL
    const coeURL = "https://raw.githubusercontent.com/carionb/0322/main/COEBiddingResultsPrices.csv";
    const vehicleURL = "https://raw.githubusercontent.com/carionb/0322/main/AnnualMotorVehiclePopulationbyVehicleType.csv";
    
    Promise.all([
      d3.csv(coeURL, cleanRow),
      d3.csv(vehicleURL, cleanRow)
    ]).then(([coeData, vehicleData]) => {
      // 保存原始数据
      coeDataOriginal = coeData;
      vehicleDataOriginal = vehicleData;
      
      // 处理 COE 数据：解析日期并转换 premium 为数字
      coeDataOriginal.forEach(d => {
        d.date = d.month ? parseCoeDate(d.month) : null;
        if (!d.date) console.error("COE日期解析失败：", d.month);
        d.premium = d.premium ? +d.premium.replace(/,/g, "") : NaN;
      });
      
      // 处理车辆数据：解析年份并转换 number 为数字
      vehicleDataOriginal.forEach(d => {
        d.yearParsed = d.year ? parseVehicleYear(d.year) : null;
        d.number = d.number ? +d.number.replace(/,/g, "") : 0;
      });
      
      // 动态填充下拉菜单选项
      
      // COE 年份
      let years = Array.from(new Set(coeDataOriginal.map(d => d.date.getFullYear())))
                       .sort((a, b) => a - b);
      const coeYearSelect = d3.select("#coeYearSelect");
      years.forEach(y => {
        coeYearSelect.append("option")
                     .attr("value", y)
                     .text(y);
      });
      
      // COE 车辆类别（vehicle_class）——请确保 CSV 中存在该字段
      let classes = Array.from(new Set(coeDataOriginal.map(d => d.vehicle_class).filter(d => d)))
                       .sort();
      const coeClassSelect = d3.select("#coeClassSelect");
      classes.forEach(c => {
        coeClassSelect.append("option")
                      .attr("value", c)
                      .text(c);
      });
      
      // Vehicle 数据类别（category）——请确保 CSV 中存在该字段
      let categories = Array.from(new Set(vehicleDataOriginal.map(d => d.category).filter(d => d)))
                          .sort();
      const vehicleCategorySelect = d3.select("#vehicleCategorySelect");
      categories.forEach(cat => {
        vehicleCategorySelect.append("option")
                             .attr("value", cat)
                             .text(cat);
      });
      
      // 初始绘制图表
      initChart();
      updateChart();
      
      // 绑定下拉菜单事件
      d3.select("#coeYearSelect").on("change", updateChart);
      d3.select("#coeClassSelect").on("change", updateChart);
      d3.select("#vehicleCategorySelect").on("change", updateChart);
      
      // 复选框切换系列显示（保持不变）
      d3.select("#toggleCoe").on("change", function() {
        const visibility = this.checked ? "visible" : "hidden";
        chartGroup.selectAll(".coe-line, .dot-coe").style("visibility", visibility);
      });
      
      d3.select("#toggleVehicle").on("change", function() {
        const visibility = this.checked ? "visible" : "hidden";
        chartGroup.selectAll(".vehicle-line, .dot-vehicle").style("visibility", visibility);
      });
      
    }).catch(error => {
      console.error("Error loading CSV data:", error);
    });
    
    // 初始创建折线和图例（空数据绑定，后续 updateChart() 更新数据）
    function initChart() {
      // 添加 COE 折线
      chartGroup.append("path")
                .attr("class", "line coe-line")
                .attr("stroke", "steelblue");
      
      // 添加 Vehicle 折线
      chartGroup.append("path")
                .attr("class", "line vehicle-line")
                .attr("stroke", "orange");
      
      // 添加图例
      const legend = svg.append("g")
                        .attr("class", "legend")
                        .attr("transform", `translate(${margin.left}, ${margin.top})`);
      
      legend.append("circle")
            .attr("cx", chartWidth - 120)
            .attr("cy", 10)
            .attr("r", 6)
            .style("fill", "steelblue");
      
      legend.append("text")
            .attr("x", chartWidth - 105)
            .attr("y", 15)
            .text("COE Premiums")
            .style("font-size", "12px")
            .attr("alignment-baseline", "middle");
      
      legend.append("circle")
            .attr("cx", chartWidth - 120)
            .attr("cy", 30)
            .attr("r", 6)
            .style("fill", "orange");
      
      legend.append("text")
            .attr("x", chartWidth - 105)
            .attr("y", 35)
            .text("Total Vehicles")
            .style("font-size", "12px")
            .attr("alignment-baseline", "middle");
    }
    
    // updateChart() 根据下拉菜单筛选数据、更新比例尺、坐标轴及折线、数据点
    function updateChart() {
      // 获取下拉菜单选择值
      const selectedYear = d3.select("#coeYearSelect").property("value");
      const selectedClass = d3.select("#coeClassSelect").property("value");
      const selectedCategory = d3.select("#vehicleCategorySelect").property("value");
      
      // 过滤 COE 数据（按年份与车辆类别过滤）
      let filteredCOE = coeDataOriginal.filter(d => {
        const matchYear = (selectedYear === "All" || d.date.getFullYear().toString() === selectedYear);
        const matchClass = (selectedClass === "All" || d.vehicle_class === selectedClass);
        return matchYear && matchClass;
      });
      
      // 过滤 Vehicle 数据（按 category 过滤）
      let filteredVehicle = vehicleDataOriginal.filter(d => {
        return (selectedCategory === "All" || d.category === selectedCategory);
      });
      
      // 根据过滤后的车辆数据按年份聚合
      let aggregatedVehicleData = Array.from(
        d3.rollup(filteredVehicle, v => d3.sum(v, d => d.number), d => d.year),
        ([year, total]) => ({ year: parseVehicleYear(year), total })
      ).sort((a, b) => a.year - b.year);
      
      // 更新 x 轴域（联合 COE 与车辆的日期/年份）
      let coeDates = filteredCOE.map(d => d.date);
      let vehicleYears = aggregatedVehicleData.map(d => d.year);
      let allDates = coeDates.concat(vehicleYears);
      let xMin = d3.min(allDates);
      let xMax = d3.max(allDates);
      xScale.domain([xMin, xMax]);
      
      // 更新 y 轴域
      yLeft.domain([0, d3.max(filteredCOE, d => d.premium)]).nice();
      yRight.domain([0, d3.max(aggregatedVehicleData, d => d.total)]).nice();
      
      // 更新坐标轴
      chartGroup.select(".x.axis")
                .transition().duration(1000)
                .call(xAxis);
      
      chartGroup.select(".y.axis.left")
                .transition().duration(1000)
                .call(yAxisLeft);
      
      chartGroup.select(".y.axis.right")
                .transition().duration(1000)
                .call(yAxisRight);
      
      // 更新网格线
      xGridGroup.transition().duration(1000)
                .attr("transform", `translate(0, ${chartHeight})`)
                .call(xAxis.tickSize(-chartHeight).tickFormat(""));
      yGridGroup.transition().duration(1000)
                .call(yAxisLeft.tickSize(-chartWidth).tickFormat(""));
      
      // 更新 COE 折线与数据点
      chartGroup.select(".coe-line")
                .datum(filteredCOE)
                .transition().duration(1000)
                .attr("d", lineCOE);
      
      // 数据点更新（采用数据绑定方式）
      let coeDots = chartGroup.selectAll(".dot-coe")
                              .data(filteredCOE, d => d.month);
      
      // 删除多余数据点
      coeDots.exit().remove();
      
      // 更新已有数据点位置
      coeDots.transition().duration(1000)
             .attr("cx", d => xScale(d.date))
             .attr("cy", d => yLeft(d.premium));
      
      // 添加新数据点
      coeDots.enter().append("circle")
             .attr("class", "dot-coe")
             .attr("r", 3)
             .attr("fill", "steelblue")
             .attr("cx", d => xScale(d.date))
             .attr("cy", d => yLeft(d.premium))
             .on("mouseover", (event, d) => {
                tooltip.transition().duration(200).style("opacity", 0.9);
                tooltip.html(`Month: ${d3.timeFormat("%b %Y")(d.date)}<br/>Premium: $${d.premium}`)
                       .style("left", `${event.pageX + 10}px`)
                       .style("top", `${event.pageY - 28}px`);
             })
             .on("mouseout", () => {
                tooltip.transition().duration(500).style("opacity", 0);
             });
      
      // 更新 Vehicle 折线与数据点
      chartGroup.select(".vehicle-line")
                .datum(aggregatedVehicleData)
                .transition().duration(1000)
                .attr("d", lineVehicle);
      
      let vehicleDots = chartGroup.selectAll(".dot-vehicle")
                                  .data(aggregatedVehicleData, d => d.year);
      vehicleDots.exit().remove();
      vehicleDots.transition().duration(1000)
                 .attr("cx", d => xScale(d.year))
                 .attr("cy", d => yRight(d.total));
      vehicleDots.enter().append("circle")
                 .attr("class", "dot-vehicle")
                 .attr("r", 3)
                 .attr("fill", "orange")
                 .attr("cx", d => xScale(d.year))
                 .attr("cy", d => yRight(d.total))
                 .on("mouseover", (event, d) => {
                    tooltip.transition().duration(200).style("opacity", 0.9);
                    tooltip.html(`Year: ${d3.timeFormat("%Y")(d.year)}<br/>Total: ${d.total}`)
                           .style("left", `${event.pageX + 10}px`)
                           .style("top", `${event.pageY - 28}px`);
                 })
                 .on("mouseout", () => {
                    tooltip.transition().duration(500).style("opacity", 0);
                 });
    }
  </script>
</body>
</html>
